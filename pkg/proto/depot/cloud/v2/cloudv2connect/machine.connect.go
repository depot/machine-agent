// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: depot/cloud/v2/machine.proto

package cloudv2connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v2 "github.com/depot/machine-agent/pkg/proto/depot/cloud/v2"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// MachineServiceName is the fully-qualified name of the MachineService service.
	MachineServiceName = "depot.cloud.v2.MachineService"
)

// MachineServiceClient is a client for the depot.cloud.v2.MachineService service.
type MachineServiceClient interface {
	RegisterMachine(context.Context, *connect_go.Request[v2.RegisterMachineRequest]) (*connect_go.ServerStreamForClient[v2.RegisterMachineResponse], error)
	PingMachineHealth(context.Context, *connect_go.Request[v2.PingMachineHealthRequest]) (*connect_go.Response[v2.PingMachineHealthResponse], error)
}

// NewMachineServiceClient constructs a client for the depot.cloud.v2.MachineService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMachineServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) MachineServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &machineServiceClient{
		registerMachine: connect_go.NewClient[v2.RegisterMachineRequest, v2.RegisterMachineResponse](
			httpClient,
			baseURL+"/depot.cloud.v2.MachineService/RegisterMachine",
			opts...,
		),
		pingMachineHealth: connect_go.NewClient[v2.PingMachineHealthRequest, v2.PingMachineHealthResponse](
			httpClient,
			baseURL+"/depot.cloud.v2.MachineService/PingMachineHealth",
			opts...,
		),
	}
}

// machineServiceClient implements MachineServiceClient.
type machineServiceClient struct {
	registerMachine   *connect_go.Client[v2.RegisterMachineRequest, v2.RegisterMachineResponse]
	pingMachineHealth *connect_go.Client[v2.PingMachineHealthRequest, v2.PingMachineHealthResponse]
}

// RegisterMachine calls depot.cloud.v2.MachineService.RegisterMachine.
func (c *machineServiceClient) RegisterMachine(ctx context.Context, req *connect_go.Request[v2.RegisterMachineRequest]) (*connect_go.ServerStreamForClient[v2.RegisterMachineResponse], error) {
	return c.registerMachine.CallServerStream(ctx, req)
}

// PingMachineHealth calls depot.cloud.v2.MachineService.PingMachineHealth.
func (c *machineServiceClient) PingMachineHealth(ctx context.Context, req *connect_go.Request[v2.PingMachineHealthRequest]) (*connect_go.Response[v2.PingMachineHealthResponse], error) {
	return c.pingMachineHealth.CallUnary(ctx, req)
}

// MachineServiceHandler is an implementation of the depot.cloud.v2.MachineService service.
type MachineServiceHandler interface {
	RegisterMachine(context.Context, *connect_go.Request[v2.RegisterMachineRequest], *connect_go.ServerStream[v2.RegisterMachineResponse]) error
	PingMachineHealth(context.Context, *connect_go.Request[v2.PingMachineHealthRequest]) (*connect_go.Response[v2.PingMachineHealthResponse], error)
}

// NewMachineServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMachineServiceHandler(svc MachineServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/depot.cloud.v2.MachineService/RegisterMachine", connect_go.NewServerStreamHandler(
		"/depot.cloud.v2.MachineService/RegisterMachine",
		svc.RegisterMachine,
		opts...,
	))
	mux.Handle("/depot.cloud.v2.MachineService/PingMachineHealth", connect_go.NewUnaryHandler(
		"/depot.cloud.v2.MachineService/PingMachineHealth",
		svc.PingMachineHealth,
		opts...,
	))
	return "/depot.cloud.v2.MachineService/", mux
}

// UnimplementedMachineServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMachineServiceHandler struct{}

func (UnimplementedMachineServiceHandler) RegisterMachine(context.Context, *connect_go.Request[v2.RegisterMachineRequest], *connect_go.ServerStream[v2.RegisterMachineResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cloud.v2.MachineService.RegisterMachine is not implemented"))
}

func (UnimplementedMachineServiceHandler) PingMachineHealth(context.Context, *connect_go.Request[v2.PingMachineHealthRequest]) (*connect_go.Response[v2.PingMachineHealthResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("depot.cloud.v2.MachineService.PingMachineHealth is not implemented"))
}
