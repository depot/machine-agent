// @generated by protoc-gen-es v1.2.1 with parameter "target=ts,import_extension=none"
// @generated from file depot/cloud/v2/machine.proto (package depot.cloud.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf'
import {Message, proto3, protoInt64} from '@bufbuild/protobuf'

/**
 * @generated from message depot.cloud.v2.RegisterMachineRequest
 */
export class RegisterMachineRequest extends Message<RegisterMachineRequest> {
  /**
   * @generated from field: string connection_id = 1;
   */
  connectionId = ''

  /**
   * @generated from oneof depot.cloud.v2.RegisterMachineRequest.cloud
   */
  cloud:
    | {
        /**
         * @generated from field: depot.cloud.v2.RegisterMachineRequest.AWSRegistration aws = 2;
         */
        value: RegisterMachineRequest_AWSRegistration
        case: 'aws'
      }
    | {case: undefined; value?: undefined} = {case: undefined}

  constructor(data?: PartialMessage<RegisterMachineRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.cloud.v2.RegisterMachineRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'connection_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'aws', kind: 'message', T: RegisterMachineRequest_AWSRegistration, oneof: 'cloud'},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterMachineRequest {
    return new RegisterMachineRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterMachineRequest {
    return new RegisterMachineRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterMachineRequest {
    return new RegisterMachineRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: RegisterMachineRequest | PlainMessage<RegisterMachineRequest> | undefined,
    b: RegisterMachineRequest | PlainMessage<RegisterMachineRequest> | undefined,
  ): boolean {
    return proto3.util.equals(RegisterMachineRequest, a, b)
  }
}

/**
 * @generated from message depot.cloud.v2.RegisterMachineRequest.AWSRegistration
 */
export class RegisterMachineRequest_AWSRegistration extends Message<RegisterMachineRequest_AWSRegistration> {
  /**
   * @generated from field: string document = 1;
   */
  document = ''

  /**
   * @generated from field: string signature = 2;
   */
  signature = ''

  constructor(data?: PartialMessage<RegisterMachineRequest_AWSRegistration>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.cloud.v2.RegisterMachineRequest.AWSRegistration'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'document', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'signature', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterMachineRequest_AWSRegistration {
    return new RegisterMachineRequest_AWSRegistration().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterMachineRequest_AWSRegistration {
    return new RegisterMachineRequest_AWSRegistration().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RegisterMachineRequest_AWSRegistration {
    return new RegisterMachineRequest_AWSRegistration().fromJsonString(jsonString, options)
  }

  static equals(
    a: RegisterMachineRequest_AWSRegistration | PlainMessage<RegisterMachineRequest_AWSRegistration> | undefined,
    b: RegisterMachineRequest_AWSRegistration | PlainMessage<RegisterMachineRequest_AWSRegistration> | undefined,
  ): boolean {
    return proto3.util.equals(RegisterMachineRequest_AWSRegistration, a, b)
  }
}

/**
 * @generated from message depot.cloud.v2.RegisterMachineResponse
 */
export class RegisterMachineResponse extends Message<RegisterMachineResponse> {
  /**
   * @generated from field: string machine_id = 1;
   */
  machineId = ''

  /**
   * @generated from field: string token = 2;
   */
  token = ''

  /**
   * @generated from oneof depot.cloud.v2.RegisterMachineResponse.task
   */
  task:
    | {
        /**
         * @generated from field: depot.cloud.v2.RegisterMachineResponse.PendingTask pending = 3;
         */
        value: RegisterMachineResponse_PendingTask
        case: 'pending'
      }
    | {
        /**
         * @generated from field: depot.cloud.v2.RegisterMachineResponse.BuildKitTask buildkit = 4;
         */
        value: RegisterMachineResponse_BuildKitTask
        case: 'buildkit'
      }
    | {case: undefined; value?: undefined} = {case: undefined}

  constructor(data?: PartialMessage<RegisterMachineResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.cloud.v2.RegisterMachineResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'machine_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'token', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 3, name: 'pending', kind: 'message', T: RegisterMachineResponse_PendingTask, oneof: 'task'},
    {no: 4, name: 'buildkit', kind: 'message', T: RegisterMachineResponse_BuildKitTask, oneof: 'task'},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterMachineResponse {
    return new RegisterMachineResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterMachineResponse {
    return new RegisterMachineResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterMachineResponse {
    return new RegisterMachineResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: RegisterMachineResponse | PlainMessage<RegisterMachineResponse> | undefined,
    b: RegisterMachineResponse | PlainMessage<RegisterMachineResponse> | undefined,
  ): boolean {
    return proto3.util.equals(RegisterMachineResponse, a, b)
  }
}

/**
 * @generated from message depot.cloud.v2.RegisterMachineResponse.Mount
 */
export class RegisterMachineResponse_Mount extends Message<RegisterMachineResponse_Mount> {
  /**
   * @generated from field: string path = 1;
   */
  path = ''

  /**
   * @generated from field: string device = 2;
   */
  device = ''

  /**
   * @generated from field: depot.cloud.v2.RegisterMachineResponse.Mount.FilesystemType fs_type = 3;
   */
  fsType = RegisterMachineResponse_Mount_FilesystemType.UNSPECIFIED

  /**
   * Initialize the ceph if present.
   *
   * @generated from field: optional depot.cloud.v2.RegisterMachineResponse.Mount.CephVolume ceph_volume = 4;
   */
  cephVolume?: RegisterMachineResponse_Mount_CephVolume

  constructor(data?: PartialMessage<RegisterMachineResponse_Mount>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.cloud.v2.RegisterMachineResponse.Mount'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'path', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'device', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 3, name: 'fs_type', kind: 'enum', T: proto3.getEnumType(RegisterMachineResponse_Mount_FilesystemType)},
    {no: 4, name: 'ceph_volume', kind: 'message', T: RegisterMachineResponse_Mount_CephVolume, opt: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterMachineResponse_Mount {
    return new RegisterMachineResponse_Mount().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterMachineResponse_Mount {
    return new RegisterMachineResponse_Mount().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterMachineResponse_Mount {
    return new RegisterMachineResponse_Mount().fromJsonString(jsonString, options)
  }

  static equals(
    a: RegisterMachineResponse_Mount | PlainMessage<RegisterMachineResponse_Mount> | undefined,
    b: RegisterMachineResponse_Mount | PlainMessage<RegisterMachineResponse_Mount> | undefined,
  ): boolean {
    return proto3.util.equals(RegisterMachineResponse_Mount, a, b)
  }
}

/**
 * @generated from enum depot.cloud.v2.RegisterMachineResponse.Mount.FilesystemType
 */
export enum RegisterMachineResponse_Mount_FilesystemType {
  /**
   * @generated from enum value: FILESYSTEM_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FILESYSTEM_TYPE_EXT4 = 1;
   */
  EXT4 = 1,

  /**
   * @generated from enum value: FILESYSTEM_TYPE_XFS = 2;
   */
  XFS = 2,

  /**
   * @generated from enum value: FILESYSTEM_TYPE_BTRFS = 3;
   */
  BTRFS = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(RegisterMachineResponse_Mount_FilesystemType)
proto3.util.setEnumType(
  RegisterMachineResponse_Mount_FilesystemType,
  'depot.cloud.v2.RegisterMachineResponse.Mount.FilesystemType',
  [
    {no: 0, name: 'FILESYSTEM_TYPE_UNSPECIFIED'},
    {no: 1, name: 'FILESYSTEM_TYPE_EXT4'},
    {no: 2, name: 'FILESYSTEM_TYPE_XFS'},
    {no: 3, name: 'FILESYSTEM_TYPE_BTRFS'},
  ],
)

/**
 * rbd device map rbd/{volume_name}/{volume_name} --name {client_name} --keyring /etc/ceph/ceph.{client_name}.keyring
 *
 * @generated from message depot.cloud.v2.RegisterMachineResponse.Mount.CephVolume
 */
export class RegisterMachineResponse_Mount_CephVolume extends Message<RegisterMachineResponse_Mount_CephVolume> {
  /**
   * Used as the namespace and image name.
   *
   * @generated from field: string volume_name = 1;
   */
  volumeName = ''

  /**
   * Includes `client.` prefix
   *
   * @generated from field: string client_name = 2;
   */
  clientName = ''

  /**
   * Store securely. NOTE: this is not a keyring file but just a key.
   *
   * @generated from field: string key = 3;
   */
  key = ''

  /**
   * Store at /etc/ceph/ceph.conf
   *
   * @generated from field: string ceph_conf = 4;
   */
  cephConf = ''

  constructor(data?: PartialMessage<RegisterMachineResponse_Mount_CephVolume>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.cloud.v2.RegisterMachineResponse.Mount.CephVolume'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'volume_name', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'client_name', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 3, name: 'key', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 4, name: 'ceph_conf', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterMachineResponse_Mount_CephVolume {
    return new RegisterMachineResponse_Mount_CephVolume().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterMachineResponse_Mount_CephVolume {
    return new RegisterMachineResponse_Mount_CephVolume().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): RegisterMachineResponse_Mount_CephVolume {
    return new RegisterMachineResponse_Mount_CephVolume().fromJsonString(jsonString, options)
  }

  static equals(
    a: RegisterMachineResponse_Mount_CephVolume | PlainMessage<RegisterMachineResponse_Mount_CephVolume> | undefined,
    b: RegisterMachineResponse_Mount_CephVolume | PlainMessage<RegisterMachineResponse_Mount_CephVolume> | undefined,
  ): boolean {
    return proto3.util.equals(RegisterMachineResponse_Mount_CephVolume, a, b)
  }
}

/**
 * PendingTask represents an instruction to wait for a task to be assigned
 *
 * @generated from message depot.cloud.v2.RegisterMachineResponse.PendingTask
 */
export class RegisterMachineResponse_PendingTask extends Message<RegisterMachineResponse_PendingTask> {
  constructor(data?: PartialMessage<RegisterMachineResponse_PendingTask>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.cloud.v2.RegisterMachineResponse.PendingTask'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterMachineResponse_PendingTask {
    return new RegisterMachineResponse_PendingTask().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterMachineResponse_PendingTask {
    return new RegisterMachineResponse_PendingTask().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterMachineResponse_PendingTask {
    return new RegisterMachineResponse_PendingTask().fromJsonString(jsonString, options)
  }

  static equals(
    a: RegisterMachineResponse_PendingTask | PlainMessage<RegisterMachineResponse_PendingTask> | undefined,
    b: RegisterMachineResponse_PendingTask | PlainMessage<RegisterMachineResponse_PendingTask> | undefined,
  ): boolean {
    return proto3.util.equals(RegisterMachineResponse_PendingTask, a, b)
  }
}

/**
 * BuildkitTask represents an instruction to start a buildkit daemon
 *
 * @generated from message depot.cloud.v2.RegisterMachineResponse.BuildKitTask
 */
export class RegisterMachineResponse_BuildKitTask extends Message<RegisterMachineResponse_BuildKitTask> {
  /**
   * @generated from field: string server_name = 1;
   */
  serverName = ''

  /**
   * @generated from field: depot.cloud.v2.Cert cert = 2;
   */
  cert?: Cert

  /**
   * @generated from field: depot.cloud.v2.Cert ca_cert = 3;
   */
  caCert?: Cert

  /**
   * @generated from field: repeated depot.cloud.v2.RegisterMachineResponse.Mount mounts = 4;
   */
  mounts: RegisterMachineResponse_Mount[] = []

  /**
   * @generated from field: int32 cache_size = 5;
   */
  cacheSize = 0

  /**
   * @generated from field: optional string trace_endpoint = 6;
   */
  traceEndpoint?: string

  /**
   * @generated from field: optional depot.cloud.v2.RegisterMachineResponse.Profiler profiler = 7;
   */
  profiler?: RegisterMachineResponse_Profiler

  /**
   * @generated from field: optional bool disable_parallel_gzip = 8;
   */
  disableParallelGzip?: boolean

  /**
   * @generated from field: optional bool run_gc_before_start = 9;
   */
  runGcBeforeStart?: boolean

  /**
   * @generated from field: optional bool enable_scheduler_debug = 11;
   */
  enableSchedulerDebug?: boolean

  /**
   * Turns off merging feature of buildkit.  Attempting to help GDC.
   *
   * @generated from field: optional bool disable_merge_to = 12;
   */
  disableMergeTo?: boolean

  constructor(data?: PartialMessage<RegisterMachineResponse_BuildKitTask>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.cloud.v2.RegisterMachineResponse.BuildKitTask'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'server_name', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'cert', kind: 'message', T: Cert},
    {no: 3, name: 'ca_cert', kind: 'message', T: Cert},
    {no: 4, name: 'mounts', kind: 'message', T: RegisterMachineResponse_Mount, repeated: true},
    {no: 5, name: 'cache_size', kind: 'scalar', T: 5 /* ScalarType.INT32 */},
    {no: 6, name: 'trace_endpoint', kind: 'scalar', T: 9 /* ScalarType.STRING */, opt: true},
    {no: 7, name: 'profiler', kind: 'message', T: RegisterMachineResponse_Profiler, opt: true},
    {no: 8, name: 'disable_parallel_gzip', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true},
    {no: 9, name: 'run_gc_before_start', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true},
    {no: 11, name: 'enable_scheduler_debug', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true},
    {no: 12, name: 'disable_merge_to', kind: 'scalar', T: 8 /* ScalarType.BOOL */, opt: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterMachineResponse_BuildKitTask {
    return new RegisterMachineResponse_BuildKitTask().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterMachineResponse_BuildKitTask {
    return new RegisterMachineResponse_BuildKitTask().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterMachineResponse_BuildKitTask {
    return new RegisterMachineResponse_BuildKitTask().fromJsonString(jsonString, options)
  }

  static equals(
    a: RegisterMachineResponse_BuildKitTask | PlainMessage<RegisterMachineResponse_BuildKitTask> | undefined,
    b: RegisterMachineResponse_BuildKitTask | PlainMessage<RegisterMachineResponse_BuildKitTask> | undefined,
  ): boolean {
    return proto3.util.equals(RegisterMachineResponse_BuildKitTask, a, b)
  }
}

/**
 * Specifies sending buildkit profiling data to a remote endpoint.
 *
 * @generated from message depot.cloud.v2.RegisterMachineResponse.Profiler
 */
export class RegisterMachineResponse_Profiler extends Message<RegisterMachineResponse_Profiler> {
  /**
   * @generated from field: string endpoint = 1;
   */
  endpoint = ''

  /**
   * @generated from field: string token = 2;
   */
  token = ''

  /**
   * @generated from field: string project_id = 3;
   */
  projectId = ''

  constructor(data?: PartialMessage<RegisterMachineResponse_Profiler>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.cloud.v2.RegisterMachineResponse.Profiler'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'endpoint', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'token', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 3, name: 'project_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterMachineResponse_Profiler {
    return new RegisterMachineResponse_Profiler().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterMachineResponse_Profiler {
    return new RegisterMachineResponse_Profiler().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterMachineResponse_Profiler {
    return new RegisterMachineResponse_Profiler().fromJsonString(jsonString, options)
  }

  static equals(
    a: RegisterMachineResponse_Profiler | PlainMessage<RegisterMachineResponse_Profiler> | undefined,
    b: RegisterMachineResponse_Profiler | PlainMessage<RegisterMachineResponse_Profiler> | undefined,
  ): boolean {
    return proto3.util.equals(RegisterMachineResponse_Profiler, a, b)
  }
}

/**
 * @generated from message depot.cloud.v2.PingMachineHealthRequest
 */
export class PingMachineHealthRequest extends Message<PingMachineHealthRequest> {
  /**
   * @generated from field: string machine_id = 1;
   */
  machineId = ''

  /**
   * @generated from field: repeated depot.cloud.v2.DiskSpace disks = 2;
   */
  disks: DiskSpace[] = []

  constructor(data?: PartialMessage<PingMachineHealthRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.cloud.v2.PingMachineHealthRequest'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'machine_id', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'disks', kind: 'message', T: DiskSpace, repeated: true},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingMachineHealthRequest {
    return new PingMachineHealthRequest().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingMachineHealthRequest {
    return new PingMachineHealthRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingMachineHealthRequest {
    return new PingMachineHealthRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: PingMachineHealthRequest | PlainMessage<PingMachineHealthRequest> | undefined,
    b: PingMachineHealthRequest | PlainMessage<PingMachineHealthRequest> | undefined,
  ): boolean {
    return proto3.util.equals(PingMachineHealthRequest, a, b)
  }
}

/**
 * @generated from message depot.cloud.v2.DiskSpace
 */
export class DiskSpace extends Message<DiskSpace> {
  /**
   * @generated from field: string device = 1;
   */
  device = ''

  /**
   * @generated from field: string path = 2;
   */
  path = ''

  /**
   * @generated from field: int64 free_mb = 3;
   */
  freeMb = protoInt64.zero

  /**
   * @generated from field: int64 total_mb = 4;
   */
  totalMb = protoInt64.zero

  /**
   * @generated from field: int64 free_inodes = 5;
   */
  freeInodes = protoInt64.zero

  /**
   * @generated from field: int64 total_inodes = 6;
   */
  totalInodes = protoInt64.zero

  constructor(data?: PartialMessage<DiskSpace>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.cloud.v2.DiskSpace'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'device', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'path', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 3, name: 'free_mb', kind: 'scalar', T: 3 /* ScalarType.INT64 */},
    {no: 4, name: 'total_mb', kind: 'scalar', T: 3 /* ScalarType.INT64 */},
    {no: 5, name: 'free_inodes', kind: 'scalar', T: 3 /* ScalarType.INT64 */},
    {no: 6, name: 'total_inodes', kind: 'scalar', T: 3 /* ScalarType.INT64 */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiskSpace {
    return new DiskSpace().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiskSpace {
    return new DiskSpace().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiskSpace {
    return new DiskSpace().fromJsonString(jsonString, options)
  }

  static equals(
    a: DiskSpace | PlainMessage<DiskSpace> | undefined,
    b: DiskSpace | PlainMessage<DiskSpace> | undefined,
  ): boolean {
    return proto3.util.equals(DiskSpace, a, b)
  }
}

/**
 * @generated from message depot.cloud.v2.PingMachineHealthResponse
 */
export class PingMachineHealthResponse extends Message<PingMachineHealthResponse> {
  /**
   * @generated from field: bool should_terminate = 1;
   */
  shouldTerminate = false

  constructor(data?: PartialMessage<PingMachineHealthResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.cloud.v2.PingMachineHealthResponse'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'should_terminate', kind: 'scalar', T: 8 /* ScalarType.BOOL */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingMachineHealthResponse {
    return new PingMachineHealthResponse().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingMachineHealthResponse {
    return new PingMachineHealthResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingMachineHealthResponse {
    return new PingMachineHealthResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: PingMachineHealthResponse | PlainMessage<PingMachineHealthResponse> | undefined,
    b: PingMachineHealthResponse | PlainMessage<PingMachineHealthResponse> | undefined,
  ): boolean {
    return proto3.util.equals(PingMachineHealthResponse, a, b)
  }
}

/**
 * @generated from message depot.cloud.v2.Cert
 */
export class Cert extends Message<Cert> {
  /**
   * @generated from field: string cert = 1;
   */
  cert = ''

  /**
   * @generated from field: string key = 2;
   */
  key = ''

  constructor(data?: PartialMessage<Cert>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = 'depot.cloud.v2.Cert'
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {no: 1, name: 'cert', kind: 'scalar', T: 9 /* ScalarType.STRING */},
    {no: 2, name: 'key', kind: 'scalar', T: 9 /* ScalarType.STRING */},
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Cert {
    return new Cert().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Cert {
    return new Cert().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Cert {
    return new Cert().fromJsonString(jsonString, options)
  }

  static equals(a: Cert | PlainMessage<Cert> | undefined, b: Cert | PlainMessage<Cert> | undefined): boolean {
    return proto3.util.equals(Cert, a, b)
  }
}
